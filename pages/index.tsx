import React from 'react'
import type { NextPage } from 'next'
import Head from 'next/head'
import { useLoading, useSearchContext } from '../hooks'
import styles from '../styles/Home.module.css'
import { useCallback } from 'react'

export interface Rating {
  rate: number;
  count: number;
}

export interface Product {
  id: number;
  title: string;
  price: number;
  description: string;
  category: string;
  image: string;
  rating: Rating;
}

const Home: NextPage = () => {

  const { state } = useSearchContext();

  const [ count, setCount ] = React.useState<number>(5);
  const [ apiRes, setAPIRes ] = React.useState<Product[]>();
  const [ loading, setLoading ] = React.useState<boolean>(true);
  const countJawn = React.useRef(0);

  const stateOfFour = React.useState(4);
  const stateOfFive = React.useState(5);

  const nine = useCallback(() => stateOfFour[0] + stateOfFive[0],[stateOfFour[0],stateOfFive[0]]);

  React.useEffect(()=> {
    console.log('sum is ' + nine() )
  },[nine])

  React.useEffect(()=> {
    let isActive = true;
    if(!loading) setLoading(true);
    fetch(`https://fakestoreapi.com/products?limit=${count}`)
      .then(res => res.json())
      .then(jsonRes => {
        let offset = jsonRes;
        if(count > 5){
          offset.splice(0, count - 5)
        }
        
        if(isActive){
            setAPIRes(offset);
            setLoading(false);
        }
      })

      .catch(e => console.error(e))
      // cleanup

      .finally(() => {
        // case where error is caught - error should only handle the error, so finally can handle the loader
        if(loading)setLoading(false)
      })

      return () => {
        isActive = false;
      };
  },[count])

  const handleIncrement = () => {
    countJawn.current = countJawn.current + 1;
    setCount( count => count + 5);
  }

  const handleDecrement = () => {
    countJawn.current = countJawn.current + 1;
    setCount( count => count - 5);
  }

  return useLoading(loading)(()=>(
    (
      <div className={styles.container}>
        <Head>
          <title>Fake EC Store</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <p>{state.value}</p>
  
        <p>{countJawn.current}</p>
        
        <article>
          <h1>Products:</h1>
          <section>
            <ul style={ulStyle}>
              {
                apiRes?.map((prod:Product) => (
                  <li key={prod.id} style={liStyle} >
                    <p>{prod.title}</p>
                    <img style={{width:'4rem',height:'auto', paddingLeft:'1rem'}}src={prod.image}/>
                  </li>
                ))
              }
            </ul>
      
          </section>
          <div>
            <button 
              disabled={count <= 5 ? true: false}
              onClick={handleDecrement}> Previous Page</button>
            <button 
              disabled={count >= 20 ? true: false}
              onClick={handleIncrement}> Next Page</button>
          </div>
          
        </article>
      
      </div>
    )
  ))
  
}

export default Home

const ulStyle: React.CSSProperties = {
  display: 'flex',
  alignItems:'center',
  justifyContent: 'center',
  flexDirection:'row',

}

const liStyle:React.CSSProperties = {
  listStyle:'none',
  padding: '1rem',
  height:'9rem',
  width:'13rem',
  border: 'solid 1px #999',
  display: 'flex',
  flexDirection:'row',
  alignItems:'center',
  justifyContent:'space-between',
  margin: '0 .5rem',
}
