import React, { useCallback } from 'react'
import type { NextPage } from 'next'
import Head from 'next/head'
import { useLoading, useSearchContext } from '../hooks'
import styles from '../styles/Home.module.css'

export interface Rating {
  rate: number;
  count: number;
}

export interface Product {
  id: number;
  title: string;
  price: number;
  description: string;
  category: string;
  image: string;
  rating: Rating;
}

const Home: NextPage = () => {

  const { state } = useSearchContext();

  const [ count, setCount ] = React.useState<number>(5);
  const [ apiRes, setAPIRes ] = React.useState<Product[]>();
  const [ loading, setLoading ] = React.useState<boolean>(true);
  const [ selected, setSelected ] = React.useState<number[]>([])
  const countJawn = React.useRef(0);

  React.useEffect(()=> {
    let isActive = true;
    if(!loading) setLoading(true);
    fetch(`https://fakestoreapi.com/products?limit=${count}`)
      .then(res => res.json())
      .then(jsonRes => {
        let offset = jsonRes;
        if(count > 5){
          offset.splice(0, count - 5)
        }
        
        if(isActive){
            setAPIRes(offset);
            setLoading(false);
        }
      })

      .catch(e => console.error(e))
      // cleanup

      .finally(() => {
        // case where error is caught - error should only handle the error, so finally can handle the loader
        if(loading)setLoading(false)
      })

      return () => {
        isActive = false;
      };
  },[count])

  const handleIncrement = () => {
    countJawn.current = countJawn.current + 1;
    setCount( count => count + 5);
  }

  const handleDecrement = () => {
    countJawn.current = countJawn.current + 1;
    setCount( count => count - 5);
  }

  const updateNumberOfSelectedProducts = useCallback((newId:number)=>{
    const elIndex = selected.indexOf(newId);

    // case remove
    if(elIndex !== -1) {
      setSelected(prev => prev.filter(el => el !== newId))
    } else {
      // case add
      setSelected(prev => [...prev,newId])
    }
  },[selected])

  const HomePageView:React.FC = ()=> (
    <div className={styles.container}>
      <Head>
        <title>Fake EC Store</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <p>{state.value}</p>

      <p>{countJawn.current}</p>

      <br></br>
      
      <article>
        <h1>Products:</h1>
        <section>
          <ul style={ulStyle}>
            {
              apiRes?.map((prod:Product) => (
                <SelectableProduct 
                  key={prod.id}
                  cb={updateNumberOfSelectedProducts}
                  isSelected={selected.indexOf(prod.id) !== -1}
                  {...prod} />
              ))
            }
          </ul>
    
        </section>
        <div>
          <button 
            disabled={count <= 5 ? true: false}
            onClick={handleDecrement}> Previous Page</button>
          <button 
            disabled={count >= 20 ? true: false}
            onClick={handleIncrement}> Next Page</button>
        </div>
        
      </article>
    
    </div>
  )

  return useLoading(loading)(HomePageView)
  
}

interface IProductComponent extends Product {
  cb:(id:number)=>void,
  isSelected:boolean
}

const SelectableProduct:React.FC<IProductComponent> = React.memo(({id,image,title,cb,isSelected}) => {
  return (
    <li key={id} style={{...liStyle,backgroundColor:isSelected ? 'rgba(255,182,193,.9)' : '#fff'}} onClick={()=>cb(id)}>
      <p>{title}</p>
      <img style={{width:'4rem',height:'auto', paddingLeft:'1rem'}}src={image} alt=''/>
    </li>
  )
})

export default Home

const ulStyle: React.CSSProperties = {
  display: 'flex',
  alignItems:'center',
  justifyContent: 'center',
  flexDirection:'row',

}

const liStyle:React.CSSProperties = {
  listStyle:'none',
  padding: '1rem',
  height:'9rem',
  width:'13rem',
  border: 'solid 1px #999',
  display: 'flex',
  flexDirection:'row',
  alignItems:'center',
  justifyContent:'space-between',
  margin: '0 .5rem',
}
